{"version":3,"sources":["components/RegionalMap.jsx","components/UKMap.jsx","components/CovidTable.jsx","components/Chart.jsx","components/Dashboard.jsx","components/Ball.jsx","components/Sketcher.jsx","components/Payment.jsx","components/ForgotPassword.jsx","components/Login.jsx","components/CreateAccount.jsx","App.js","components/Constants.jsx","serviceWorker.js","index.js"],"names":["React","memo","fileName","regionCases","regionName","setTooltipContent","setGraphData","localCases","useState","geographies","setGeographies","useEffect","fetch","process","then","response","status","json","worlddata","feature","objects","Merged_Polygon","features","console","log","projection","geoMercator","fitSize","type","colorScale","scaleThreshold","domain","range","schemeReds","width","height","geography","map","geo","idx","key","rsmKey","onMouseEnter","numCases","properties","lad19nm","display","data","onMouseLeave","fill","onClick","style","default","outline","stroke","strokeWidth","hover","pressed","areaCases","Regional","toggleDisplayRegional","secondaryTable","setSecondaryTable","eer","handleRegionClick","regionIndex","EER13NM","replace","Totals","regional","areaName","UK","total","Region","Button","color","marginTop","Container","Row","Alert","Col","Table","striped","bordered","length","Object","keys","xs","handleOnClick","Chart","borderColor","backgroundColor","date","label","marginBottom","labels","datasets","options","legend","maintainAspectRatio","scales","xAxes","gridLines","drawOnChartArea","ticks","autoSkip","maxTicksLimit","yAxes","callback","value","borderColors","backgroundColors","cases","i","md","Card","CardBody","CardTitle","whiteSpace","CardSubtitle","slice","isMobile","window","innerWidth","innerHeight","hypot","Math","calculateChangeDirection","dx","dy","hyp","ax","ay","checkCollision","diameter","Ball","p","simulationState","this","x","floor","random","y","sz","xspeed","yspeed","exposedTime","infectedTime","update","exposedToInfected","infectedToRecovers","noStroke","ellipse","bounce","checkCollisions","others","otherBall","balls","sketchLegend","setup","createCanvas","draw","background","textSize","text","noLoop","setDisplaySimulator","numBalls","initiallyExposed","setSimulationState","padding","paddingLeft","paddingBottom","sketch","max","onChange","changeEvent","target","loadStripe","ForgotPassword","setDisplayForgotPassword","setLoggedIn","isCodeSent","setCodeSent","isVerify","setVerify","margin","Form","FormGroup","Label","for","Input","name","id","placeholder","ev","preventDefault","Login","showLogin","email","setEmail","password","setPassword","error","setError","displayForgotPassword","e","invalid","FormFeedback","requestOptions","method","headers","body","JSON","stringify","code","message","handleLogin","CreateAccount","setDisplayCreateAccount","verifyPassword","setVerifyPassword","handleCreateAccount","App","setCases","content","setContent","setAreaCases","setLocalCases","graphData","displaySimulator","login","isLoggedIn","displayCreateAccount","maxWidth","data-tip","paddingTop","Date","open","src","alt","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.48c0b2f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst width = 800;\nconst height = 800;\n\nconst RegionalMap = ({ fileName, regionCases, regionName, setTooltipContent, setGraphData, localCases }) => {\n  const [geographies, setGeographies] = useState([])\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/\" + fileName + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.Merged_Polygon).features)\n        })\n      })\n  }, [fileName])\n\n  const projection = geoMercator()\n                .fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([50, 100, 200, 500, 1000, 5000])\n    .range(schemeReds[7]);\n\n  return (\n    <div>\n    {/* <div> */}\n    <ComposableMap width={ width } height={ height } projection={projection} >\n        <Geographies geography={geographies}>\n          {({ geographies }) =>\n            geographies.map((geo, idx) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                onMouseEnter={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                  setGraphData({display: true, data: localCases[regionName][geo.properties.lad19nm] })\n                }}\n                onMouseLeave={() => {\n                  setTooltipContent(\"\");\n                  setGraphData({display: false, data: [0] })\n                }}\n                fill={geo.properties.lad19nm in regionCases ? colorScale(regionCases[geo.properties.lad19nm]) : colorScale(0)}\n                onClick={() => {\n                  const numCases = (geo.properties.lad19nm in regionCases ? regionCases[geo.properties.lad19nm] : '0');\n                  setTooltipContent(`${geo.properties.lad19nm}: ${numCases} Cases`);\n                  setGraphData({display: true, data: localCases[regionName][geo.properties.lad19nm] })\n                }}\n                style={{\n                  default: {\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"0.5\"\n                  },\n                  hover: {\n                    // fill: \"#F53\",\n                    outline: \"none\",\n                    stroke: \"#000000\",\n                    strokeWidth: \"2\"\n                  },\n                  pressed: {\n                    outline: \"none\"\n                  }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n    </ComposableMap>\n  </div>\n  )\n}\n\nexport default React.memo(RegionalMap);","import React, { useState, useEffect } from \"react\";\nimport { geoMercator } from \"d3-geo\";\nimport { schemeReds } from \"d3-scale-chromatic\";\nimport { scaleThreshold } from \"d3-scale\";\nimport { feature } from \"topojson-client\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport { Button } from 'reactstrap';\n\nimport RegionalMap from \"./RegionalMap\";\n\nconst width = 800;\nconst height = 800;\n\nconst UKMap = ({ setTooltipContent, areaCases, Regional, toggleDisplayRegional, secondaryTable, setSecondaryTable, setGraphData, localCases }) => {\n  const [geographies, setGeographies] = useState([]);\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/maps/phe_regions.json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.log(`There was a problem: ${response.status}`)\n          return\n        }\n        response.json().then(worlddata => {\n          setGeographies(feature(worlddata, worlddata.objects.eer).features)\n        })\n      })\n  }, []);\n\n  const handleRegionClick = regionIndex => {\n      const regionName = geographies[regionIndex].properties.EER13NM\n      const fileName = regionName.replace(/ /g, '_')\n  \n      setTooltipContent(\"\");\n      setGraphData({display: true, data: localCases.Totals[geographies[regionIndex].properties.EER13NM] })\n      toggleDisplayRegional({ display: true, fileName, regionCases: areaCases[regionName].regional, regionName });\n      setSecondaryTable({ display: true, areaName: regionName })\n  }\n\n  const projection = geoMercator().fitSize([width, height], {type:\"FeatureCollection\", features: geographies})\n    \n  var colorScale = scaleThreshold()\n    .domain([0, 5000, 6000, 8000, 10000, 12000, 15000])\n    .range(schemeReds[7]);\n\n\n    const UK = () => {\n      return (\n      <div>\n      {/* <div> */}\n        <ComposableMap width={ width } height={ height } projection={projection} >\n            <Geographies geography={geographies}>\n              {({ geographies }) =>\n                geographies.map((geo, idx) => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      setTooltipContent(`${geo.properties.EER13NM}: ${areaCases[geo.properties.EER13NM].total} Cases`);\n                      setGraphData({display: true, data: localCases.Totals[geo.properties.EER13NM] })\n                    }}\n                    onMouseLeave={() => {\n                      setTooltipContent(\"\");\n                      setGraphData({display: false, data: [] })\n                    }}\n                    fill={geo.properties.EER13NM in areaCases ? colorScale(areaCases[geo.properties.EER13NM].total) : colorScale(0)}\n                    onClick={() => handleRegionClick(idx)}\n                    style={{\n                      default: {\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"0.5\"\n                      },\n                      hover: {\n                        // fill: \"#F53\",\n                        outline: \"none\",\n                        stroke: \"#000000\",\n                        strokeWidth: \"2\"\n                      },\n                      pressed: {\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                ))\n              }\n            </Geographies>\n        </ComposableMap>\n      </div>\n    )};\n\n    const Region = () => \n      <div>\n        <Button color='primary' onClick={() => { toggleDisplayRegional({display: false}); setSecondaryTable({ ...secondaryTable, display: false }); }}>BACK</Button>\n        <RegionalMap fileName={Regional.fileName} regionCases={Regional.regionCases} regionName={Regional.regionName} setTooltipContent={setTooltipContent} setGraphData={setGraphData} localCases={localCases} />\n      </div>\n\n  return (\n    <div style={{height: '600px', marginTop: '25px'}} >\n{Regional.display ? <Region /> : <UK />\n        }\n    </div>\n\n  )\n}\n\nexport default React.memo(UKMap);","import React, { useEffect } from \"react\";\nimport { Table, Container, Row, Col, Alert } from 'reactstrap';\n\nconst CovidTable = ({ areaCases, toggleDisplayRegional, secondaryTable, setSecondaryTable }) => {\n  useEffect(() => {\n  }, []);\n\n  const handleOnClick = areaName => {\n        if (secondaryTable.areaName === areaName) {\n            if (secondaryTable.display) {\n                toggleDisplayRegional({display: false})\n            } else {\n                const fileName = areaName.replace(/ /g, '_')\n            \n                toggleDisplayRegional({ display: true, fileName, regionName: areaName, regionCases: areaCases[areaName].regional });\n            }\n\n            setSecondaryTable({ display: !secondaryTable.display, areaName })\n        } else {\n            setSecondaryTable({ display: true, areaName })\n\n            const fileName = areaName.replace(/ /g, '_')\n            toggleDisplayRegional({ display: true, fileName, regionName: areaName, regionCases: areaCases[areaName].regional });\n        }\n  }\n\n  return <Container>\n            <Row>\n                <Alert color=\"info\">\n                    Click on a row to view the numbers for each UTLA in the Region!\n                </Alert>\n            </Row>\n            <Row>\n            {!secondaryTable.display ?\n                <Col xs='12'>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>Region</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.keys(areaCases).map(areaName => <tr onClick={ () => handleOnClick(areaName) }>\n                                                                        <td>{areaName}</td>\n                                                                        <td>{areaCases[areaName].total}</td>\n                                                                    </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n                :\n                <Col>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                            <th>{secondaryTable.areaName}</th>\n                            <th>Number of Cases</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {areaCases.length === 0 ? null :\n                                Object.keys(areaCases[secondaryTable.areaName].regional).map(areaName => <tr>\n                                                                                                            <td>{areaName}</td>\n                                                                                                            <td>{areaCases[secondaryTable.areaName].regional[areaName]}</td>\n                                                                                                        </tr>)}\n                        </tbody>\n                    </Table>\n                </Col>\n            }\n            </Row>\n        </Container>;\n    }\n\nexport default React.memo(CovidTable);","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Col } from 'reactstrap';\n\nconst Chart = ({ borderColor, backgroundColor, date, data, label, display, height, width }) =>\n    <Col xs='12' style={{borderColor, backgroundColor, height, width, marginTop: '25px', marginBottom: '25px' }} >\n        <Line\n            data={{\n                labels: date,\n                datasets: [{\n                    label,\n                    fill: false,\n                    borderColor,\n                    data,\n                    display\n                }]\n            }}\n            options={{\n                legend: {\n                    display\n                },\n                maintainAspectRatio: false,\n                scales: {\n                    xAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            display\n                        }\n                    }],\n                    yAxes: [{\n                        gridLines: {\n                            drawOnChartArea: false,\n                            display\n                        },\n                        ticks: {\n                            autoSkip: true,\n                            maxTicksLimit: 7,\n                            callback: value => `${value / 1000}k`,\n                            display\n                        }\n                    }]\n                }\n            }}\n        />\n    </Col>;\n\nexport default Chart;\n","import React, { useEffect } from \"react\";\nimport { Card, CardTitle, CardBody, Col, Row, CardSubtitle } from 'reactstrap';\n\nconst Dashboard = ({ borderColors, backgroundColors, labels, cases }) => {\n  useEffect(() => {\n  }, [])\n\n  return (\n    <Row>\n        {backgroundColors.map((color, i) => <Col xs='4' md ='2' style={{color: borderColors[i]}}>\n                                                <Card style={{backgroundColor: color}}>\n                                                    <CardBody>\n                                                        <CardTitle style={{whiteSpace: \"nowrap\"}}>{labels[i]}</CardTitle>\n                                                        <CardSubtitle>{cases[Object.keys(cases)[i]].slice(-1)[0]}</CardSubtitle>\n                                                    </CardBody>\n                                                </Card>\n                                            </Col>)}\n    </Row>\n  )\n}\n\nexport default React.memo(Dashboard);","import {isMobile} from 'react-device-detect';\n\nconst width = isMobile ? window.innerWidth : 800;\nconst height = isMobile ? window.innerHeight * 0.75 : 600;\n\nconst { hypot } = Math\n\nconst calculateChangeDirection = ({ dx, dy }) => {\n  const hyp = hypot(dx, dy);\n  const ax = dx / hyp;\n  const ay = dy / hyp\n  return { ax, ay }\n}\n\nconst checkCollision = ({ dx, dy, diameter }) => {\n  const distance2 = dx * dx + dy * dy\n  return distance2 < diameter * diameter\n}\n\n\nexport default function Ball(p, simulationState) {\n\tthis.x = Math.floor((Math.random() * width) + 1);\n  this.y = Math.floor((Math.random() * height) + 1);\n  this.color = 'blue';\n\tthis.sz = 15;\n\tthis.xspeed = Math.random()\n  this.yspeed = Math.random();\n  this.p = p;\n  this.exposedTime = 0;\n  this.infectedTime = 0;\n\t\n\tthis.update = () => {\n    if (this.color === 'grey') {\n      this.xspeed = 0;\n      this.yspeed = 0;\n    }\n\n\t\tthis.x += this.xspeed;\n\t\tthis.y += this.yspeed;\n\t};\n\t\n\tthis.display = () => {\n    if (this.color === 'orange') {\n      this.exposedTime += 1;\n      if (this.exposedTime >= 200) {\n        const fate = Math.floor((Math.random() * 100) + 1);\n        if (fate < simulationState.exposedToInfected) {\n          this.color = 'green';\n        } else {\n          this.color = 'pink';\n        }\n      }\n    } else if (this.color === 'green') {\n      this.infectedTime += 1;\n      if (this.infectedTime >= 200) {\n        const fate = Math.floor((Math.random() * 100) + 1);\n        if (fate < simulationState.infectedToRecovers) {\n          this.color = 'pink';\n        } else {\n          this.color = 'grey';\n        }\n      }\n    }\n    \n\t\tp.fill(this.color);\n\t\tp.noStroke();\n\t\tp.ellipse(this.x, this.y, this.sz, this.sz);\n\t};\n\t\n\tthis.bounce = () => {\n\t\tif (this.x > width || this.x < 0) {\n\t\t\tthis.xspeed *= -1;\n\t\t}\n\t\tif (this.y > height || this.y < 0) {\n\t\t\tthis.yspeed *= -1;\n\t\t}\n  }\n\n  this.checkCollisions = (others, idx) => {\n    for (let i = idx + 1; i < others.length; i++) {\n      const otherBall = others[i]\n\n      const dx = otherBall.x - this.x\n      const dy = otherBall.y - this.y\n\n      if (checkCollision({ dx, dy, diameter: 15 })) {\n        const { ax, ay } = calculateChangeDirection({ dx, dy })\n\n        this.xspeed -= ax\n        this.yspeed -= ay\n        otherBall.xspeed = ax\n        otherBall.yspeed = ay\n\n        if ((this.color === 'green' || this.color === 'orange') && otherBall.color === 'blue') {\n          otherBall.color = 'orange';\n        } else if ((otherBall.color === 'green' || otherBall.color === 'orange') && this.color === 'blue') {\n          this.color = 'orange';\n        }\n      }\n    }\n  }\n  \n}","import React, { useState } from \"react\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport {isMobile} from 'react-device-detect';\nimport Ball from './Ball';\n\nconst width = window.innerHeight > window.innerWidth ? window.innerWidth * 0.9 : 800;\nconst height = isMobile ? window.innerHeight * 0.75 : 600;\n\nvar balls = [];\n\nfunction sketch (p, simulationState) {\n \n  p.setup = () => {\n    p.createCanvas(width, height);\n    \n    for (var i = 0; i < simulationState.numBalls; i++) {\n      balls[i] = new Ball(p, simulationState);\n    }\n\n    for (i = 0; i < simulationState.initiallyExposed; i++) {\n      balls[i].color = 'orange';\n    }\n  };\n  p.draw = () => {\n    p.background('#FFFFFF');\n\n    for (var i = 0; i < balls.length; i++) {\n      balls[i].update();\n      balls[i].display();\n      balls[i].bounce();\n      balls[i].checkCollisions(balls, i);\n    }\n  };\n}\n\nfunction sketchLegend(p) {\n  p.setup = () => {\n    p.createCanvas(width, 60);\n  };\n\n  p.draw = () => {\n    p.background('#FFFFFF');\n    p.textSize(20)\n\n    p.fill('blue');\n\t\tp.noStroke();\n    p.ellipse(15, 10, 15, 15);\n    \n    p.text('Healthy', 30, 17)\n\n    p.fill('orange');\n\t\tp.noStroke();\n    p.ellipse(130, 10, 15, 15);\n\n    p.text('Exposed', 145, 17);\n\n    p.fill('green');\n\t\tp.noStroke();\n    p.ellipse(245, 10, 15, 15);\n\n    p.text('Infected', 260, 17);\n\n    if (isMobile) {\n      p.fill('pink');\n      p.noStroke();\n      p.ellipse(15, 40, 15, 15);\n      \n      p.text('Recovered', 30, 47);\n\n      p.fill('grey');\n      p.noStroke();\n      p.ellipse(145, 40, 15, 15);\n      \n      p.text('Deceased', 160, 47);\n    } else {\n      p.fill('pink');\n      p.noStroke();\n      p.ellipse(360, 10, 15, 15);\n      \n      p.text('Recovered', 375, 17);\n  \n      p.fill('grey');\n      p.noStroke();\n      p.ellipse(490, 10, 15, 15);\n      \n      p.text('Deceased', 505, 17)\n    }\n\n    p.noLoop()\n  };\n}\n\nconst Sketcher = ({ setDisplaySimulator }) =>  {\n  const [simulationState, setSimulationState] = useState({ numBalls: 200, initiallyExposed: 1, exposedToInfected: 80, infectedToRecovers: 80 });\n\n  return (\n    <Container>\n      <Row style={{padding: '25px'}}>\n        <p>\n          <h1>{'SEIR DISEASE SPREAD MODEL USING BALLS'}</h1>\n          <h6>{'A healthy person can get exposed to the virus.'}</h6>\n          <h6>{'An exposed person recovers or gets infected and can expose other people to the virus.'}</h6>\n          <h6>{'An infected person recovers or dies and can expose other people to the virus.'}</h6>\n        </p>\n      </Row>\n      <Row style={{paddingLeft: '25px', paddingBottom: '25px'}}>\n        <Button color='primary' onClick={() => setDisplaySimulator(false)}><h4>View Map</h4></Button>\n      </Row>\n      <Row>\n          <Col>\n            <P5Wrapper sketch={p => sketch(p, simulationState)} />\n            <P5Wrapper sketch={sketchLegend} />\n          </Col>\n          <Col>\n            <div>\n              <p>Number of balls</p>\n              <RangeSlider\n                max={400}\n                value={simulationState.numBalls}\n                onChange={changeEvent => setSimulationState({...simulationState, numBalls: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <p>Number of initially exposed balls</p>\n              <RangeSlider\n                max={simulationState.numBalls}\n                value={simulationState.initiallyExposed}\n                onChange={changeEvent => setSimulationState({...simulationState, initiallyExposed: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <p>Percent of exposed population that gets infected</p>\n              <RangeSlider\n                value={simulationState.exposedToInfected}\n                onChange={changeEvent => setSimulationState({...simulationState, exposedToInfected: changeEvent.target.value})}\n              />\n            </div>\n            <div>\n              <p>Percent of infected population that recovers</p>\n              <RangeSlider\n                value={simulationState.infectedToRecovers}\n                onChange={changeEvent => setSimulationState({...simulationState, infectedToRecovers: changeEvent.target.value})}\n              />\n            </div>\n            <div style={{paddingBottom: '25px'}}>\n              <Button color='primary' onClick={() => setSimulationState({ numBalls: 200, initiallyExposed: 1, exposedToInfected: 80, infectedToRecovers: 80 })}>RESET AND RUN</Button>\n            </div>\n          </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default React.memo(Sketcher);","import React, {useState} from 'react';\nimport {loadStripe} from '@stripe/stripe-js';\nimport {CardElement, Elements, useElements, useStripe} from '@stripe/react-stripe-js';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport '../form.css';\n\nconst CARD_OPTIONS = {\n  iconStyle: 'solid',\n  style: {\n    base: {\n      iconColor: '#c4f0ff',\n      color: '#fff',\n      fontWeight: 500,\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n      fontSize: '16px',\n      fontSmoothing: 'antialiased',\n      ':-webkit-autofill': {\n        color: '#fce883',\n      },\n      '::placeholder': {\n        color: '#87bbfd',\n      },\n    },\n    invalid: {\n      iconColor: '#ffc7ee',\n      color: '#ffc7ee',\n    },\n  },\n};\n\nconst CardField = ({onChange}) => (\n  <div className=\"FormRow\">\n    <CardElement options={CARD_OPTIONS} onChange={onChange} />\n  </div>\n);\n\nconst Field = ({\n  label,\n  id,\n  type,\n  placeholder,\n  required,\n  autoComplete,\n  value,\n  onChange,\n}) => (\n  <div className=\"FormRow\">\n    <label htmlFor={id} className=\"FormRowLabel\">\n      {label}\n    </label>\n    <input\n      className=\"FormRowInput\"\n      id={id}\n      type={type}\n      placeholder={placeholder}\n      required={required}\n      autoComplete={autoComplete}\n      value={value}\n      onChange={onChange}\n    />\n  </div>\n);\n\nconst SubmitButton = ({processing, error, children, disabled}) => (\n  <button\n    className={`SubmitButton ${error ? 'SubmitButton--error' : ''}`}\n    type=\"submit\"\n    disabled={processing || disabled}\n  >\n    {processing ? 'Processing...' : children}\n  </button>\n);\n\nconst ErrorMessage = ({children}) => (\n  <div className=\"ErrorMessage\" role=\"alert\">\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 17 17\">\n      <path\n        fill=\"#FFF\"\n        d=\"M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z\"\n      />\n      <path\n        fill=\"#6772e5\"\n        d=\"M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z\"\n      />\n    </svg>\n    {children}\n  </div>\n);\n\nconst ResetButton = ({onClick}) => (\n  <button type=\"button\" className=\"ResetButton\" onClick={onClick}>\n    <svg width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\">\n      <path\n        fill=\"#FFF\"\n        d=\"M15,7.05492878 C10.5000495,7.55237307 7,11.3674463 7,16 C7,20.9705627 11.0294373,25 16,25 C20.9705627,25 25,20.9705627 25,16 C25,15.3627484 24.4834055,14.8461538 23.8461538,14.8461538 C23.2089022,14.8461538 22.6923077,15.3627484 22.6923077,16 C22.6923077,19.6960595 19.6960595,22.6923077 16,22.6923077 C12.3039405,22.6923077 9.30769231,19.6960595 9.30769231,16 C9.30769231,12.3039405 12.3039405,9.30769231 16,9.30769231 L16,12.0841673 C16,12.1800431 16.0275652,12.2738974 16.0794108,12.354546 C16.2287368,12.5868311 16.5380938,12.6540826 16.7703788,12.5047565 L22.3457501,8.92058924 L22.3457501,8.92058924 C22.4060014,8.88185624 22.4572275,8.83063012 22.4959605,8.7703788 C22.6452866,8.53809377 22.5780351,8.22873685 22.3457501,8.07941076 L22.3457501,8.07941076 L16.7703788,4.49524351 C16.6897301,4.44339794 16.5958758,4.41583275 16.5,4.41583275 C16.2238576,4.41583275 16,4.63969037 16,4.91583275 L16,7 L15,7 L15,7.05492878 Z M16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 Z\"\n      />\n    </svg>\n  </button>\n);\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [error, setError] = useState(null);\n  const [cardComplete, setCardComplete] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState(null);\n  const [billingDetails, setBillingDetails] = useState({\n    email: '',\n    phone: '',\n    name: '',\n  });\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n\n    if (error) {\n      elements.getElement('card').focus();\n      return;\n    }\n\n    if (cardComplete) {\n      setProcessing(true);\n    }\n\n    const payload = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: billingDetails,\n    });\n\n    if (payload.error) {\n      setError(payload.error);\n    }\n\n    const charge = await stripe.createCharges({\n        amount: 1,\n        currency: 'usd',\n        description: 'Example charge',\n        source: payload.paymentMethod.id,\n        statement_descriptor: 'Custom descriptor',\n    });\n\n    if (charge.error) {\n    setError(payload.error);\n    } else {\n    setPaymentMethod(charge);\n    }\n\n    setProcessing(false);\n  };\n\n  const reset = () => {\n    setError(null);\n    setProcessing(false);\n    setPaymentMethod(null);\n    setBillingDetails({\n      email: '',\n      phone: '',\n      name: '',\n    });\n  };\n\n  return paymentMethod ? (\n    <div className=\"Result\">\n      <div className=\"ResultTitle\" role=\"alert\">\n        Payment successful\n      </div>\n      <div className=\"ResultMessage\">\n        Thanks for trying Stripe Elements. No money was charged, but we\n        generated a PaymentMethod: {paymentMethod.id}\n      </div>\n      <ResetButton onClick={reset} />\n    </div>\n  ) : (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <fieldset className=\"FormGroup\">\n        <Field\n          label=\"Name\"\n          id=\"name\"\n          type=\"text\"\n          placeholder=\"Jane Doe\"\n          required\n          autoComplete=\"name\"\n          value={billingDetails.name}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, name: e.target.value});\n          }}\n        />\n        <Field\n          label=\"Email\"\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"janedoe@gmail.com\"\n          required\n          autoComplete=\"email\"\n          value={billingDetails.email}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, email: e.target.value});\n          }}\n        />\n        <Field\n          label=\"Phone\"\n          id=\"phone\"\n          type=\"tel\"\n          placeholder=\"(941) 555-0123\"\n          required\n          autoComplete=\"tel\"\n          value={billingDetails.phone}\n          onChange={(e) => {\n            setBillingDetails({...billingDetails, phone: e.target.value});\n          }}\n        />\n      </fieldset>\n      <fieldset className=\"FormGroup\">\n        <CardField\n          onChange={(e) => {\n            setError(e.error);\n            setCardComplete(e.complete);\n          }}\n        />\n      </fieldset>\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n      <SubmitButton processing={processing} error={error} disabled={!stripe}>\n        Donate\n      </SubmitButton>\n    </form>\n  );\n};\n\nconst ELEMENTS_OPTIONS = {\n  fonts: [\n    {\n      cssSrc: 'https://fonts.googleapis.com/css?family=Roboto',\n    },\n  ],\n};\n\n// Make sure to call `loadStripe` outside of a component’s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe('pk_test_VSlnWkVGekcSAegrW8AG4nGj');\n\nconst Payment = ({ setDonate }) => {\n  return (\n    <Container className=\"AppWrapper\" style={{marginTop: 50}}>\n        <Row>\n            <Button color='primary' onClick={() => setDonate(false)}><h4>Back</h4></Button>\n        </Row>\n        <Row style={{marginTop: 50}}>\n            <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\n                <CheckoutForm />\n            </Elements>\n        </Row>\n    </Container>\n  );\n};\n\nexport default Payment;","import React, { useState } from \"react\";\nimport { Container, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\nconst ForgotPassword = ( { setDisplayForgotPassword, setLoggedIn } ) => {\n    const [isCodeSent, setCodeSent] = useState(false);\n    const [isVerify, setVerify] = useState(false);\n\n    const handleVerificationCode = () => {\n        setVerify(true);\n    };\n\n    const sendVerificationCode = () => {\n        setCodeSent(true);\n    };\n\n    return (\n        <Container style={{margin: 50}}>\n            <Button style={{marginBottom: 50}} color='primary' onClick={() => setDisplayForgotPassword(false)}><h4>Back</h4></Button>\n            {isVerify ?\n            <div/>\n            :\n            isCodeSent ?\n                <Form>\n                    <FormGroup>\n                        <Label for=\"code\">A verification code has been sent.</Label>\n                        <Input type=\"text\" name=\"code\" id=\"code\" placeholder=\"Verification Code\" />\n                    </FormGroup>\n                    <Button color='primary' onClick={ev => { ev.preventDefault(); handleVerificationCode() }}>Verify</Button>\n                </Form>\n                :\n                <Form>\n                    <FormGroup>\n                        <Label for=\"exampleEmail\">Email</Label>\n                        <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"example@example.com\" />\n                    </FormGroup>\n                    <Button color='primary' onClick={ev => { ev.preventDefault(); sendVerificationCode(); }}>Send Verification Code</Button>\n                </Form>\n            }\n        </Container>\n    );\n};\n\nexport default ForgotPassword;","import React, { useState } from \"react\";\nimport { Container, Form, FormGroup, Label, Input, Button, FormFeedback } from 'reactstrap';\nimport ForgotPassword from \"./ForgotPassword.jsx\";\n\nconst Login = ( { showLogin, setLoggedIn } ) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [displayForgotPassword, setDisplayForgotPassword] = useState(false);\n\n    const handleLogin = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},\n            body: JSON.stringify({ email, password })\n        };\n\n        fetch('https://virus-backend.herokuapp.com/login', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.code === 200) {\n                    showLogin(false);\n                    setLoggedIn(true);\n                } else {\n                    setError(data.message)\n                }\n            })\n    };\n\n    return (\n        <Container style={{margin: 50}}>\n            {displayForgotPassword ? <ForgotPassword setDisplayForgotPassword={setDisplayForgotPassword} setLoggedIn={setLoggedIn} /> :\n            <div>\n                <Button style={{marginBottom: 50}} color='primary' onClick={() => showLogin(false)}><h4>Back</h4></Button>\n                <Form>\n                    <FormGroup>\n                        <Label for=\"exampleEmail\">Email</Label>\n                        <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"example@example.com\" onChange={e => setEmail(e.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"examplePassword\">Password</Label>\n                        <Input invalid={error !== ''} type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} />\n                        <FormFeedback>{error}</FormFeedback>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color='primary' onClick={ev => handleLogin()}>Login</Button>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color='primary' onClick={ev => setDisplayForgotPassword(true)}>Forgot Password</Button>\n                    </FormGroup>\n                </Form>\n            </div>\n            }\n        </Container>\n    );\n};\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Container, Form, FormGroup, Label, Input, Button, FormFeedback } from 'reactstrap';\n\nconst CreateAccount = ( { setDisplayCreateAccount, setLoggedIn } ) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [verifyPassword, setVerifyPassword] = useState('')\n    const [error, setError] = useState('')\n\n    const handleCreateAccount = () => {\n        if (password !== verifyPassword) {\n            setError(\"Passwords don't match\");\n            console.log('cakked')\n            return\n        }\n        setError('');\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},\n            body: JSON.stringify({ email, password })\n        };\n\n        fetch('https://virus-backend.herokuapp.com/create_account', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.code === 200) {\n                    setDisplayCreateAccount(false);\n                    setLoggedIn(true);\n                } else {\n                    setError(data.message)\n                }\n            })\n    };\n\n    return (\n        <Container style={{margin: 50}}>\n            <Button style={{marginBottom: 50}} color='primary' onClick={() => setDisplayCreateAccount(false)}><h4>Back</h4></Button>\n            <Form>\n                <FormGroup>\n                    <Label for=\"exampleEmail\">Email</Label>\n                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"example@example.com\" onChange={e => setEmail(e.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"examplePassword\">Password</Label>\n                    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password\" onChange={e => setPassword(e.target.value)} />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleVerifyPassword\">Password</Label>\n                    <Input invalid={error !== ''}type=\"password\" name=\"verifyPassword\" id=\"verifyPassword\" placeholder=\"Verify Password\" onChange={e => setVerifyPassword(e.target.value)} />\n                    <FormFeedback>{error}</FormFeedback>\n                </FormGroup>\n                <Button color='primary' onClick={ev => handleCreateAccount()}>Create Account</Button>\n            </Form>\n        </Container>\n    );\n};\n\nexport default CreateAccount;","import React, { useState, useEffect } from \"react\";\nimport UKMap from './components/UKMap.jsx';\nimport ReactTooltip from \"react-tooltip\";\nimport { Container, Row, Col } from 'reactstrap';\nimport CovidTable from \"./components/CovidTable.jsx\";\nimport { Button } from 'reactstrap';\nimport Chart from './components/Chart.jsx';\nimport Dashboard from \"./components/Dashboard.jsx\";\nimport { Red, Blue, Grey, LightRed, LightBlue, LightGrey } from './components/Constants.jsx';\nimport Sketcher from './components/Sketcher.jsx';\nimport Payment from \"./components/Payment.jsx\";\nimport Login from \"./components/Login\";\nimport CreateAccount from \"./components/CreateAccount\";\n\nconst borderColors = [Red, Blue, Grey];\nconst backgroundColors = [LightRed, LightBlue, LightGrey];\nconst labels = ['CONFIRMED', 'TESTED', 'DECEASED'];\n\nconst App = () => {\n    const [cases, setCases] = useState(null);\n    const [content, setContent] = useState('');\n    const [areaCases, setAreaCases] = useState([]);\n    const [localCases, setLocalCases] = useState(null);\n    const [graphData, setGraphData] = useState({ data: [], display: false });\n    const [Regional, toggleDisplayRegional] = useState({ display: false, fileName: '', regionCases: '' });\n    const [secondaryTable, setSecondaryTable] = useState({ display: false, areaName: '' });\n    const [displaySimulator, setDisplaySimulator] = useState(false);\n    const [donate, setDonate] = useState(true);\n    const [login, showLogin] = useState(false);\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const [displayCreateAccount, setDisplayCreateAccount] = useState(false);\n\n    useEffect(() => {\n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setCases(cases);\n                })\n            });\n\n        fetch(process.env.PUBLIC_URL + \"/covid_data/local_totals.json\")\n            .then(response => {\n                if (response.status !== 200) {\n                    console.log(`There was a problem: ${response.status}`)\n                    return\n                }\n                response.json().then(cases => {\n                    setLocalCases(cases);\n                })\n            });\n        \n        fetch(process.env.PUBLIC_URL + \"/covid_data/uk_by_region.json\")\n            .then(response => {\n              if (response.status !== 200) {\n                console.log(`There was a problem: ${response.status}`)\n                return\n              }\n              response.json().then(cases => {\n                setAreaCases(cases);\n              })\n            })\n    }, [])\n\n    return (\n        <div style={{maxWidth: window.innerWidth}}>\n            {displaySimulator ? <Sketcher setDisplaySimulator={setDisplaySimulator}/> : login ? <Login showLogin={showLogin} setLoggedIn={setLoggedIn} /> :\n            displayCreateAccount ? <CreateAccount setDisplayCreateAccount={setDisplayCreateAccount} setLoggedIn={setLoggedIn} /> :\n            // donate ? <Payment setDonate={setDonate} /> :\n          <Container data-tip=''>\n                <Row style={{paddingTop: '25px'}}>\n                    {isLoggedIn ? null : <Col xs='12' md='3' style={{paddingBottom: '25px'}}><Button color='primary' onClick={() => setDisplayCreateAccount(true)}><h4>Create Account</h4></Button></Col>}\n                    {isLoggedIn ? null : <Col xs='12' md='2' style={{paddingBottom: '25px'}}><Button color='primary' onClick={() => showLogin(true)}><h4>Login</h4></Button></Col>}\n                </Row>\n                <Row style={{paddingTop: '25px'}}>\n                    <Col xs='12' md='6'><h1>{'England Covid-19 Tracker'}</h1></Col>\n                  <Col xs='12' md='3' style={{paddingBottom: '25px'}}><Button color='primary' onClick={() => setDisplaySimulator(true)}><h4>View Simulator</h4></Button></Col>\n                  {/* <Col xs='12' md='3' style={{paddingBottom: '25px'}}><Button color='primary' onClick={() => setDonate(true)}><h4>Donate</h4></Button></Col> */}\n              </Row>\n              <Row>\n                <Col>{cases === null ? null : <Dashboard borderColors={borderColors} backgroundColors={backgroundColors} labels={labels} cases={cases} /> } </Col>\n              </Row>\n              <Row>\n                <Col xs='12' md='6'>\n                    <UKMap setTooltipContent={setContent} areaCases={areaCases} Regional={Regional} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} setGraphData={setGraphData} localCases={localCases} />\n                    <ReactTooltip>{content}</ReactTooltip>\n                    {graphData.display ? <h2>{content}</h2> : null}\n                    {graphData.display ? <Chart borderColor={borderColors[0]} backgroundColor={backgroundColors[0]} label={labels[0]} date={localCases.Date} data={graphData.data} display={true} height={200} width={700} /> : null }\n                    <h2>{'England Trends'}</h2>\n                    {cases === null ? null : borderColors.map((color, i)=> <Chart borderColor={borderColors[i]} backgroundColor={backgroundColors[i]} label={labels[i]} date={cases.Date} data={cases[Object.keys(cases)[i]]} display={true} height={200} width={700} />)}\n                </Col>\n                <Col xs='12' md='6'>\n                    <CovidTable areaCases={areaCases} toggleDisplayRegional={toggleDisplayRegional} secondaryTable={secondaryTable} setSecondaryTable={setSecondaryTable} />\n                </Col>\n              </Row>\n              <Row>\n                  <Col xs='12' style={{paddingTop: '25px', paddingBottom: '25px'}}>\n                    <Button style={{backgroundColor: 'White', color: 'black'}} onClick={() => window.open('https://www.github.com/tkhokhar25/uk-covid')}>\n                        <img src={process.env.PUBLIC_URL + '/logo32.png'} alt='yolo'></img>Check out on Github\n                    </Button>\n                </Col>\n              </Row>\n          </Container>\n          }\n      </div>\n    )\n}\n\nexport default App;","export const Red = '#ff073a';\nexport const Blue = '#3a07ff';\nexport const Grey = 'grey';\n\nexport const LightRed = 'rgba(255,7,58,0.12549)';\nexport const LightBlue = 'rgba(58,7,255,0.12549)';\nexport const LightGrey = '#DCDCDC';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}